1.
Едно нещо се нарича метрика, когато покрива следните условия:
Положителност;
H (a, b) = 0 <-> a = b;
H (a, b) = H (b, a) за всеки a, b от това пространство (симетричност);
H (a, b) + H (b, c) >= H (a, c) (правило на триъгълника);

2.
Разстоянието на Хеминг отговоря на тези условия. То измерва колко позиции на два вектора с еднаква дължина са с различна стойност. Отговаря на трите условия.

3.
Дефинираме начален стринг X с дължина n
Дефинираме краен стринг Y с дължина m
Дефинираме разстояние D(i,j) между първите i знака в X и първите j знака в Y. 
Разстоянието между двата стринга е D (n, m). 
Цената на операцията “заместване” е 2.

3A.
Вход – стрингА и стрингБ
Изход – Разстояние между стрингА и стрингБ

3Б.
Изтриване с цена 1, Вмъкване с цена 1 и Заместване с цена 2.

3В.
Получава се (k, k) граф, като всеки символ от стринг А е свързан с всеки символ от стринг Б.

4.
import numpy as np
def lev_dist_words(tokenA, tokenB):
    distances = np.zeros((len(tokenA) + 1, len(tokenB) + 1))

    for tA in range(1, len(tokenA) + 1):
        for tB in range(1, len(tokenB) + 1):
            charA = tokenA[tA - 1]
            charB = tokenB[tB - 1]
            if charA == charB:
                distances[tA][tB] = distances[tA - 1][tB - 1]
            else:
                before = distances[tA][tB - 1]
                upper = distances[tA - 1][tB]
                diagonal = distances[tA - 1][tB - 1]

                if (before <= upper and before <= diagonal):
                    distances[tA][tB] = before + 1
                elif (upper <= before and upper <= diagonal):
                    distances[tA][tB] = upper + 1
                else:
                    distances[tA][tB] = diagonal + 1

    return distances[len(tokenA)][len(tokenB)]

студент - николай
0 0 0 0 0 0 0 0
0 1 1 1 1 1 1 1
0 1 2 2 2 2 2 2
0 1 2 3 3 3 3 3
0 1 2 3 4 4 4 4
0 1 2 3 4 5 5 5
0 0 1 2 3 4 5 6
0 1 1 2 3 4 5 6
6